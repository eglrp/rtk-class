/*------------------------------------------------------------------------------
* lambda.c : integer ambiguity resolution
*
*          Copyright (C) 2007-2008 by T.TAKASU, All rights reserved.
*
* reference :
*     [1] P.J.G.Teunissen, The least-square ambiguity decorrelation adjustment:
*         a method for fast GPS ambiguity estimation, J.Geodesy, Vol.70, 65-82,
*         1995
*     [2] X.-W.Chang, X.Yang, T.Zhou, MLAMBDA: A modified LAMBDA method for
*         integer least-squares estimation, J.Geodesy, Vol.79, 552-565, 2005
*
* version : $Revision: 1.1 $ $Date: 2008/07/17 21:48:06 $
* history : 2007/01/13 1.0 new
*           2015/05/31 1.1 add api lambda_reduction(), lambda_search()
*-----------------------------------------------------------------------------*/
#include "rtklib.h"
namespace rtklib{
	static const char rcsid[] = "$Id: lambda.c,v 1.1 2008/07/17 21:48:06 ttaka Exp $";
	const double OneOverRootTwoPi = 0.398942280401433;
	/* constants/macros ----------------------------------------------------------*/
	static const double probability[] = {
		0.9635, 0.9662, 0.9690, 0.9714, 0.9732, 0.9781, 0.9777, 0.9786, 0.9801, 0.9816, 0.9761, 0.9706, 0.9762, 0.9817, 0.9811, 0.9842, 0.9842, 0.9842, 0.9868, 0.9894, 0.9874, 0.9876, 0.9869, 0.9862, 0.9891, 0.9919, 0.9880, 0.9922, 0.9902, 0.9882, 0.9920, 0.9958, 0.9958, 0.9958, 0.9958, 0.9958, 0.9958, 0.9958, 0.9958, 0.9958,
		0.7998, 0.8149, 0.8300, 0.8406, 0.8515, 0.8781, 0.8800, 0.8837, 0.8905, 0.8973, 0.8969, 0.8965, 0.9054, 0.9142, 0.9204, 0.9141, 0.9221, 0.9301, 0.9342, 0.9382, 0.9378, 0.9415, 0.9422, 0.9429, 0.9476, 0.9523, 0.9463, 0.9591, 0.9553, 0.9516, 0.9635, 0.9755, 0.9755, 0.9755, 0.9755, 0.9755, 0.9755, 0.9755, 0.9755, 0.9755,
		0.6824, 0.7028, 0.7232, 0.7435, 0.7621, 0.7951, 0.7999, 0.8191, 0.8289, 0.8387, 0.8424, 0.8461, 0.8566, 0.8670, 0.8779, 0.8682, 0.8793, 0.8904, 0.8949, 0.8995, 0.9033, 0.9089, 0.9109, 0.9129, 0.9161, 0.9194, 0.9196, 0.9296, 0.9277, 0.9257, 0.9399, 0.9541, 0.9541, 0.9541, 0.9541, 0.9541, 0.9541, 0.9541, 0.9541, 0.9541,
		0.5879, 0.6139, 0.6400, 0.6721, 0.7004, 0.7297, 0.7405, 0.7750, 0.7873, 0.7996, 0.8024, 0.8053, 0.8202, 0.8352, 0.8446, 0.8439, 0.8546, 0.8653, 0.8704, 0.8754, 0.8811, 0.8841, 0.8879, 0.8917, 0.8953, 0.8988, 0.8982, 0.9055, 0.9062, 0.9069, 0.9197, 0.9325, 0.9325, 0.9325, 0.9325, 0.9325, 0.9325, 0.9325, 0.9325, 0.9325,
		0.5198, 0.5514, 0.5830, 0.6154, 0.6500, 0.6794, 0.7006, 0.7422, 0.7556, 0.7690, 0.7723, 0.7756, 0.7928, 0.8099, 0.8188, 0.8263, 0.8351, 0.8439, 0.8494, 0.8549, 0.8622, 0.8667, 0.8711, 0.8756, 0.8790, 0.8824, 0.8821, 0.8890, 0.8910, 0.8929, 0.9026, 0.9123, 0.9123, 0.9123, 0.9123, 0.9123, 0.9123, 0.9123, 0.9123, 0.9123,
		0.4785, 0.5086, 0.5388, 0.5707, 0.5993, 0.6428, 0.6693, 0.7145, 0.7290, 0.7435, 0.7490, 0.7546, 0.7721, 0.7896, 0.7973, 0.8094, 0.8176, 0.8258, 0.8316, 0.8374, 0.8459, 0.8527, 0.8577, 0.8627, 0.8653, 0.8680, 0.8696, 0.8767, 0.8796, 0.8824, 0.8886, 0.8947, 0.8947, 0.8947, 0.8947, 0.8947, 0.8947, 0.8947, 0.8947, 0.8947,
		0.4392, 0.4715, 0.5039, 0.5337, 0.5535, 0.6109, 0.6434, 0.6894, 0.7046, 0.7198, 0.7277, 0.7356, 0.7542, 0.7729, 0.7787, 0.7941, 0.8023, 0.8104, 0.8165, 0.8226, 0.8319, 0.8408, 0.8462, 0.8516, 0.8535, 0.8555, 0.8588, 0.8670, 0.8706, 0.8743, 0.8779, 0.8814, 0.8814, 0.8814, 0.8814, 0.8814, 0.8814, 0.8814, 0.8814, 0.8814,
		0.4110, 0.4431, 0.4751, 0.5024, 0.5223, 0.5831, 0.6201, 0.6669, 0.6821, 0.6973, 0.7075, 0.7178, 0.7378, 0.7578, 0.7634, 0.7802, 0.7888, 0.7975, 0.8039, 0.8103, 0.8198, 0.8309, 0.8365, 0.8420, 0.8434, 0.8448, 0.8495, 0.8597, 0.8632, 0.8667, 0.8700, 0.8732, 0.8732, 0.8732, 0.8732, 0.8732, 0.8732, 0.8732, 0.8732, 0.8732,
		0.3880, 0.4187, 0.4494, 0.4754, 0.4960, 0.5589, 0.5991, 0.6470, 0.6617, 0.6765, 0.6895, 0.7024, 0.7233, 0.7442, 0.7507, 0.7672, 0.7768, 0.7865, 0.7933, 0.8001, 0.8094, 0.8229, 0.8283, 0.8338, 0.8348, 0.8359, 0.8412, 0.8537, 0.8567, 0.8597, 0.8632, 0.8666, 0.8666, 0.8666, 0.8666, 0.8666, 0.8666, 0.8666, 0.8666, 0.8666,
		0.3673, 0.3969, 0.4265, 0.4515, 0.4734, 0.5380, 0.5803, 0.6297, 0.6440, 0.6582, 0.6736, 0.6890, 0.7104, 0.7318, 0.7394, 0.7561, 0.7665, 0.7769, 0.7842, 0.7916, 0.8001, 0.8166, 0.8216, 0.8266, 0.8276, 0.8286, 0.8337, 0.8480, 0.8506, 0.8532, 0.8570, 0.8608, 0.8608, 0.8608, 0.8608, 0.8608, 0.8608, 0.8608, 0.8608, 0.8608,
		0.3492, 0.3777, 0.4062, 0.4303, 0.4535, 0.5199, 0.5639, 0.6151, 0.6290, 0.6429, 0.6598, 0.6768, 0.6989, 0.7210, 0.7294, 0.7469, 0.7578, 0.7686, 0.7763, 0.7840, 0.7918, 0.8109, 0.8154, 0.8199, 0.8214, 0.8229, 0.8267, 0.8426, 0.8449, 0.8472, 0.8514, 0.8556, 0.8556, 0.8556, 0.8556, 0.8556, 0.8556, 0.8556, 0.8556, 0.8556,
		0.3337, 0.3611, 0.3885, 0.4118, 0.4352, 0.5042, 0.5498, 0.6030, 0.6170, 0.6311, 0.6483, 0.6655, 0.6885, 0.7115, 0.7207, 0.7380, 0.7496, 0.7612, 0.7693, 0.7774, 0.7845, 0.8055, 0.8095, 0.8136, 0.8159, 0.8181, 0.8208, 0.8375, 0.8396, 0.8417, 0.8464, 0.8510, 0.8510, 0.8510, 0.8510, 0.8510, 0.8510, 0.8510, 0.8510, 0.8510,
		0.3209, 0.3470, 0.3731, 0.3962, 0.4182, 0.4902, 0.5370, 0.5923, 0.6072, 0.6221, 0.6386, 0.6550, 0.6792, 0.7035, 0.7131, 0.7294, 0.7419, 0.7545, 0.7630, 0.7715, 0.7782, 0.8003, 0.8041, 0.8078, 0.8107, 0.8137, 0.8160, 0.8327, 0.8347, 0.8367, 0.8419, 0.8470, 0.8470, 0.8470, 0.8470, 0.8470, 0.8470, 0.8470, 0.8470, 0.8470,
		0.3100, 0.3350, 0.3601, 0.3834, 0.4028, 0.4777, 0.5248, 0.5828, 0.5983, 0.6138, 0.6296, 0.6454, 0.6709, 0.6965, 0.7059, 0.7213, 0.7348, 0.7483, 0.7574, 0.7664, 0.7727, 0.7955, 0.7989, 0.8024, 0.8060, 0.8097, 0.8120, 0.8283, 0.8303, 0.8323, 0.8379, 0.8436, 0.8436, 0.8436, 0.8436, 0.8436, 0.8436, 0.8436, 0.8436, 0.8436,
		0.3003, 0.3245, 0.3488, 0.3723, 0.3894, 0.4660, 0.5133, 0.5743, 0.5901, 0.6060, 0.6214, 0.6368, 0.6633, 0.6899, 0.6992, 0.7138, 0.7281, 0.7424, 0.7522, 0.7620, 0.7681, 0.7909, 0.7941, 0.7974, 0.8017, 0.8060, 0.8084, 0.8243, 0.8263, 0.8284, 0.8345, 0.8406, 0.8406, 0.8406, 0.8406, 0.8406, 0.8406, 0.8406, 0.8406, 0.8406,
		0.2912, 0.3149, 0.3386, 0.3621, 0.3783, 0.4547, 0.5026, 0.5664, 0.5826, 0.5987, 0.6139, 0.6291, 0.6564, 0.6837, 0.6929, 0.7069, 0.7218, 0.7367, 0.7474, 0.7582, 0.7637, 0.7865, 0.7898, 0.7930, 0.7978, 0.8027, 0.8052, 0.8206, 0.8228, 0.8250, 0.8315, 0.8381, 0.8381, 0.8381, 0.8381, 0.8381, 0.8381, 0.8381, 0.8381, 0.8381,
		0.2825, 0.3055, 0.3285, 0.3528, 0.3685, 0.4439, 0.4928, 0.5591, 0.5755, 0.5920, 0.6070, 0.6220, 0.6499, 0.6778, 0.6871, 0.7009, 0.7160, 0.7312, 0.7430, 0.7548, 0.7596, 0.7824, 0.7858, 0.7891, 0.7944, 0.7997, 0.8023, 0.8172, 0.8196, 0.8220, 0.8289, 0.8359, 0.8359, 0.8359, 0.8359, 0.8359, 0.8359, 0.8359, 0.8359, 0.8359,
		0.2736, 0.2958, 0.3179, 0.3441, 0.3595, 0.4337, 0.4839, 0.5519, 0.5688, 0.5856, 0.6008, 0.6160, 0.6442, 0.6723, 0.6818, 0.6957, 0.7109, 0.7262, 0.7388, 0.7515, 0.7558, 0.7786, 0.7821, 0.7857, 0.7913, 0.7969, 0.7998, 0.8142, 0.8167, 0.8192, 0.8265, 0.8339, 0.8339, 0.8339, 0.8339, 0.8339, 0.8339, 0.8339, 0.8339, 0.8339,
		0.2294, 0.2497, 0.2700, 0.2989, 0.3241, 0.3954, 0.4541, 0.5183, 0.5395, 0.5607, 0.5801, 0.5995, 0.6252, 0.6509, 0.6622, 0.6812, 0.6958, 0.7104, 0.7239, 0.7373, 0.7418, 0.7635, 0.7684, 0.7733, 0.7802, 0.7872, 0.7907, 0.8051, 0.8069, 0.8087, 0.8171, 0.8254, 0.8254, 0.8254, 0.8254, 0.8254, 0.8254, 0.8254, 0.8254, 0.8254,
		0.1736, 0.2027, 0.2318, 0.2595, 0.2893, 0.3658, 0.4295, 0.4860, 0.5119, 0.5378, 0.5621, 0.5863, 0.6100, 0.6338, 0.6497, 0.6696, 0.6850, 0.7004, 0.7120, 0.7236, 0.7327, 0.7517, 0.7576, 0.7634, 0.7718, 0.7802, 0.7850, 0.7985, 0.8008, 0.8032, 0.8103, 0.8175, 0.8175, 0.8175, 0.8175, 0.8175, 0.8175, 0.8175, 0.8175, 0.8175,
		0.0986, 0.1392, 0.1797, 0.2181, 0.2581, 0.3283, 0.4013, 0.4499, 0.4799, 0.5099, 0.5390, 0.5680, 0.5921, 0.6162, 0.6369, 0.6574, 0.6725, 0.6876, 0.6995, 0.7114, 0.7234, 0.7417, 0.7475, 0.7534, 0.7631, 0.7728, 0.7797, 0.7904, 0.7943, 0.7983, 0.8034, 0.8085, 0.8085, 0.8085, 0.8085, 0.8085, 0.8085, 0.8085, 0.8085, 0.8085,
		0.0394, 0.0909, 0.1424, 0.1873, 0.2355, 0.2974, 0.3791, 0.4209, 0.4555, 0.4900, 0.5217, 0.5535, 0.5799, 0.6062, 0.6283, 0.6476, 0.6621, 0.6766, 0.6909, 0.7051, 0.7173, 0.7305, 0.7389, 0.7474, 0.7578, 0.7681, 0.7749, 0.7851, 0.7894, 0.7937, 0.7975, 0.8013, 0.8013, 0.8013, 0.8013, 0.8013, 0.8013, 0.8013, 0.8013, 0.8013,
		0.0210, 0.0711, 0.1212, 0.1689, 0.2136, 0.2731, 0.3608, 0.3978, 0.4363, 0.4748, 0.5090, 0.5432, 0.5711, 0.5989, 0.6215, 0.6396, 0.6545, 0.6693, 0.6852, 0.7011, 0.7122, 0.7202, 0.7315, 0.7428, 0.7534, 0.7641, 0.7707, 0.7816, 0.7858, 0.7899, 0.7927, 0.7954, 0.7954, 0.7954, 0.7954, 0.7954, 0.7954, 0.7954, 0.7954, 0.7954,
		0.0113, 0.0600, 0.1086, 0.1539, 0.1971, 0.2541, 0.3459, 0.3831, 0.4243, 0.4654, 0.5010, 0.5367, 0.5648, 0.5930, 0.6164, 0.6340, 0.6490, 0.6639, 0.6814, 0.6988, 0.7084, 0.7147, 0.7270, 0.7393, 0.7502, 0.7610, 0.7668, 0.7787, 0.7830, 0.7873, 0.7899, 0.7925, 0.7925, 0.7925, 0.7925, 0.7925, 0.7925, 0.7925, 0.7925, 0.7925,
		0.0112, 0.0555, 0.0997, 0.1425, 0.1848, 0.2390, 0.3341, 0.3721, 0.4153, 0.4586, 0.4950, 0.5315, 0.5593, 0.5872, 0.6129, 0.6314, 0.6454, 0.6593, 0.6782, 0.6971, 0.7068, 0.7139, 0.7253, 0.7366, 0.7479, 0.7593, 0.7657, 0.7765, 0.7810, 0.7855, 0.7889, 0.7924, 0.7924, 0.7924, 0.7924, 0.7924, 0.7924, 0.7924, 0.7924, 0.7924,
		0.0111, 0.0520, 0.0928, 0.1337, 0.1751, 0.2291, 0.3245, 0.3613, 0.4086, 0.4558, 0.4914, 0.5270, 0.5544, 0.5818, 0.6101, 0.6298, 0.6430, 0.6562, 0.6760, 0.6958, 0.7057, 0.7134, 0.7240, 0.7345, 0.7464, 0.7584, 0.7651, 0.7758, 0.7799, 0.7841, 0.7882, 0.7924, 0.7924, 0.7924, 0.7924, 0.7924, 0.7924, 0.7924, 0.7924, 0.7924,
		0.0086, 0.0484, 0.0881, 0.1279, 0.1677, 0.2232, 0.3162, 0.3570, 0.4060, 0.4550, 0.4888, 0.5227, 0.5499, 0.5771, 0.6086, 0.6285, 0.6417, 0.6550, 0.6752, 0.6954, 0.7053, 0.7132, 0.7232, 0.7331, 0.7455, 0.7579, 0.7649, 0.7758, 0.7796, 0.7834, 0.7879, 0.7924, 0.7924, 0.7924, 0.7924, 0.7924, 0.7924, 0.7924, 0.7924, 0.7924,
		0.0050, 0.0400, 0.0700, 0.1000, 0.1500, 0.2000, 0.3000, 0.3300, 0.3600, 0.4000, 0.4500, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000
	};
	//pf=0.01
	static const double table1[] = {
		0.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
		0.01000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
		0.01100, 0.96349, 0.96625, 0.96901, 0.97138, 0.97323, 0.97810, 0.97773, 0.97863, 0.98014, 0.98164, 0.97613, 0.97063, 0.97618, 0.98173, 0.98108, 0.98419, 0.98420, 0.98422, 0.98683, 0.98944, 0.98744, 0.98756, 0.98689, 0.98621, 0.98907, 0.99193, 0.98804, 0.99217, 0.99019, 0.98821, 0.99201, 0.99581, 0.99581, 0.99581, 0.99581, 0.99581, 0.99581, 0.99581, 0.99581, 0.99581,
		0.01600, 0.79983, 0.81490, 0.82996, 0.84060, 0.85146, 0.87815, 0.87996, 0.88368, 0.89050, 0.89732, 0.89690, 0.89648, 0.90535, 0.91422, 0.92035, 0.91407, 0.92209, 0.93011, 0.93417, 0.93823, 0.93781, 0.94146, 0.94217, 0.94289, 0.94757, 0.95226, 0.94629, 0.95909, 0.95533, 0.95157, 0.96351, 0.97546, 0.97546, 0.97546, 0.97546, 0.97546, 0.97546, 0.97546, 0.97546, 0.97546,
		0.02100, 0.68240, 0.70279, 0.72318, 0.74346, 0.76206, 0.79515, 0.79986, 0.81912, 0.82891, 0.83869, 0.84239, 0.84609, 0.85655, 0.86702, 0.87788, 0.86819, 0.87928, 0.89037, 0.89492, 0.89948, 0.90326, 0.90892, 0.91091, 0.91290, 0.91613, 0.91936, 0.91961, 0.92961, 0.92765, 0.92569, 0.93989, 0.95408, 0.95408, 0.95408, 0.95408, 0.95408, 0.95408, 0.95408, 0.95408, 0.95408,
		0.02600, 0.58794, 0.61395, 0.63996, 0.67208, 0.70044, 0.72966, 0.74050, 0.77504, 0.78733, 0.79963, 0.80244, 0.80526, 0.82022, 0.83518, 0.84457, 0.84393, 0.85463, 0.86532, 0.87038, 0.87545, 0.88111, 0.88413, 0.88790, 0.89167, 0.89526, 0.89885, 0.89818, 0.90547, 0.90616, 0.90685, 0.91969, 0.93252, 0.93252, 0.93252, 0.93252, 0.93252, 0.93252, 0.93252, 0.93252, 0.93252,
		0.03100, 0.51977, 0.55137, 0.58297, 0.61536, 0.64998, 0.67941, 0.70058, 0.74223, 0.75564, 0.76905, 0.77232, 0.77560, 0.79277, 0.80993, 0.81884, 0.82633, 0.83512, 0.84392, 0.84941, 0.85489, 0.86215, 0.86670, 0.87114, 0.87558, 0.87899, 0.88240, 0.88207, 0.88903, 0.89098, 0.89293, 0.90259, 0.91225, 0.91225, 0.91225, 0.91225, 0.91225, 0.91225, 0.91225, 0.91225, 0.91225,
		0.03600, 0.47845, 0.50861, 0.53876, 0.57070, 0.59930, 0.64277, 0.66932, 0.71452, 0.72901, 0.74349, 0.74903, 0.75457, 0.77211, 0.78965, 0.79728, 0.80944, 0.81759, 0.82575, 0.83157, 0.83739, 0.84587, 0.85268, 0.85770, 0.86272, 0.86534, 0.86797, 0.86955, 0.87669, 0.87957, 0.88245, 0.88859, 0.89474, 0.89474, 0.89474, 0.89474, 0.89474, 0.89474, 0.89474, 0.89474, 0.89474,
		0.04100, 0.43915, 0.47155, 0.50394, 0.53370, 0.55352, 0.61088, 0.64337, 0.68938, 0.70458, 0.71978, 0.72768, 0.73559, 0.75425, 0.77291, 0.77873, 0.79413, 0.80227, 0.81040, 0.81651, 0.82262, 0.83188, 0.84082, 0.84621, 0.85160, 0.85353, 0.85546, 0.85881, 0.86698, 0.87062, 0.87426, 0.87785, 0.88145, 0.88145, 0.88145, 0.88145, 0.88145, 0.88145, 0.88145, 0.88145, 0.88145,
		0.04600, 0.41098, 0.44306, 0.47514, 0.50240, 0.52227, 0.58307, 0.62007, 0.66685, 0.68206, 0.69726, 0.70752, 0.71778, 0.73781, 0.75784, 0.76340, 0.78016, 0.78881, 0.79746, 0.80387, 0.81028, 0.81984, 0.83095, 0.83647, 0.84200, 0.84339, 0.84479, 0.84949, 0.85971, 0.86323, 0.86674, 0.86999, 0.87324, 0.87324, 0.87324, 0.87324, 0.87324, 0.87324, 0.87324, 0.87324, 0.87324,
		0.05100, 0.38797, 0.41868, 0.44938, 0.47545, 0.49598, 0.55893, 0.59905, 0.64695, 0.66174, 0.67653, 0.68949, 0.70244, 0.72330, 0.74415, 0.75073, 0.76720, 0.77684, 0.78648, 0.79327, 0.80006, 0.80936, 0.82292, 0.82835, 0.83377, 0.83482, 0.83587, 0.84122, 0.85369, 0.85670, 0.85972, 0.86317, 0.86663, 0.86663, 0.86663, 0.86663, 0.86663, 0.86663, 0.86663, 0.86663, 0.86663,
		0.05600, 0.36734, 0.39690, 0.42646, 0.45153, 0.47341, 0.53803, 0.58032, 0.62970, 0.64395, 0.65820, 0.67360, 0.68900, 0.71042, 0.73185, 0.73939, 0.75614, 0.76654, 0.77694, 0.78425, 0.79155, 0.80009, 0.81656, 0.82159, 0.82663, 0.82762, 0.82861, 0.83366, 0.84797, 0.85058, 0.85320, 0.85698, 0.86075, 0.86075, 0.86075, 0.86075, 0.86075, 0.86075, 0.86075, 0.86075, 0.86075,
		0.06100, 0.34921, 0.37771, 0.40621, 0.43025, 0.45351, 0.51994, 0.56390, 0.61514, 0.62900, 0.64285, 0.65980, 0.67675, 0.69885, 0.72095, 0.72937, 0.74694, 0.75776, 0.76857, 0.77631, 0.78404, 0.79183, 0.81087, 0.81540, 0.81992, 0.82143, 0.82293, 0.82674, 0.84257, 0.84488, 0.84719, 0.85138, 0.85556, 0.85556, 0.85556, 0.85556, 0.85556, 0.85556, 0.85556, 0.85556, 0.85556,
		0.06600, 0.33372, 0.36110, 0.38848, 0.41177, 0.43524, 0.50416, 0.54980, 0.60299, 0.61705, 0.63110, 0.64830, 0.66550, 0.68849, 0.71148, 0.72071, 0.73800, 0.74958, 0.76116, 0.76927, 0.77738, 0.78454, 0.80547, 0.80955, 0.81363, 0.81587, 0.81811, 0.82076, 0.83749, 0.83959, 0.84170, 0.84635, 0.85100, 0.85100, 0.85100, 0.85100, 0.85100, 0.85100, 0.85100, 0.85100, 0.85100,
		0.07100, 0.32093, 0.34701, 0.37309, 0.39623, 0.41820, 0.49022, 0.53695, 0.59232, 0.60722, 0.62212, 0.63857, 0.65502, 0.67924, 0.70346, 0.71306, 0.72943, 0.74195, 0.75447, 0.76300, 0.77152, 0.77818, 0.80034, 0.80405, 0.80777, 0.81073, 0.81370, 0.81600, 0.83274, 0.83473, 0.83672, 0.84188, 0.84703, 0.84703, 0.84703, 0.84703, 0.84703, 0.84703, 0.84703, 0.84703, 0.84703,
		0.07600, 0.31002, 0.33504, 0.36005, 0.38343, 0.40277, 0.47765, 0.52477, 0.58284, 0.59830, 0.61377, 0.62957, 0.64537, 0.67092, 0.69646, 0.70587, 0.72132, 0.73481, 0.74829, 0.75735, 0.76641, 0.77272, 0.79547, 0.79891, 0.80235, 0.80601, 0.80967, 0.81203, 0.82833, 0.83030, 0.83228, 0.83793, 0.84358, 0.84358, 0.84358, 0.84358, 0.84358, 0.84358, 0.84358, 0.84358, 0.84358,
		0.08100, 0.30027, 0.32454, 0.34880, 0.37230, 0.38935, 0.46597, 0.51332, 0.57429, 0.59014, 0.60598, 0.62140, 0.63681, 0.66334, 0.68987, 0.69915, 0.71379, 0.72809, 0.74239, 0.75219, 0.76198, 0.76805, 0.79087, 0.79415, 0.79742, 0.80171, 0.80601, 0.80843, 0.82427, 0.82631, 0.82836, 0.83449, 0.84061, 0.84061, 0.84061, 0.84061, 0.84061, 0.84061, 0.84061, 0.84061, 0.84061,
		0.08600, 0.29124, 0.31490, 0.33856, 0.36209, 0.37828, 0.45475, 0.50265, 0.56645, 0.58258, 0.59872, 0.61391, 0.62910, 0.65638, 0.68365, 0.69289, 0.70693, 0.72180, 0.73666, 0.74743, 0.75819, 0.76371, 0.78653, 0.78976, 0.79298, 0.79783, 0.80268, 0.80521, 0.82056, 0.82277, 0.82498, 0.83152, 0.83807, 0.83807, 0.83807, 0.83807, 0.83807, 0.83807, 0.83807, 0.83807, 0.83807,
		0.09100, 0.28249, 0.30551, 0.32853, 0.35283, 0.36852, 0.44394, 0.49282, 0.55906, 0.57551, 0.59195, 0.60696, 0.62196, 0.64989, 0.67781, 0.68710, 0.70087, 0.71605, 0.73123, 0.74301, 0.75478, 0.75963, 0.78245, 0.78575, 0.78906, 0.79436, 0.79967, 0.80233, 0.81721, 0.81960, 0.82200, 0.82894, 0.83589, 0.83589, 0.83589, 0.83589, 0.83589, 0.83589, 0.83589, 0.83589, 0.83589,
		0.09600, 0.27358, 0.29576, 0.31795, 0.34414, 0.35951, 0.43366, 0.48389, 0.55189, 0.56877, 0.58565, 0.60084, 0.61603, 0.64418, 0.67233, 0.68176, 0.69570, 0.71095, 0.72619, 0.73884, 0.75149, 0.75582, 0.77861, 0.78214, 0.78568, 0.79131, 0.79695, 0.79977, 0.81423, 0.81671, 0.81919, 0.82652, 0.83385, 0.83385, 0.83385, 0.83385, 0.83385, 0.83385, 0.83385, 0.83385, 0.83385,
		0.12000, 0.22939, 0.24971, 0.27003, 0.29894, 0.32414, 0.39541, 0.45409, 0.51829, 0.53952, 0.56075, 0.58014, 0.59953, 0.62521, 0.65088, 0.66215, 0.68118, 0.69579, 0.71040, 0.72385, 0.73731, 0.74180, 0.76351, 0.76842, 0.77333, 0.78024, 0.78716, 0.79069, 0.80513, 0.80692, 0.80872, 0.81707, 0.82543, 0.82543, 0.82543, 0.82543, 0.82543, 0.82543, 0.82543, 0.82543, 0.82543,
		0.15000, 0.17356, 0.20268, 0.23180, 0.25952, 0.28931, 0.36576, 0.42955, 0.48595, 0.51190, 0.53784, 0.56208, 0.58633, 0.61004, 0.63376, 0.64972, 0.66963, 0.68503, 0.70043, 0.71200, 0.72358, 0.73266, 0.75174, 0.75758, 0.76343, 0.77183, 0.78023, 0.78503, 0.79847, 0.80081, 0.80316, 0.81033, 0.81750, 0.81750, 0.81750, 0.81750, 0.81750, 0.81750, 0.81750, 0.81750, 0.81750,
		0.20000, 0.09865, 0.13919, 0.17973, 0.21807, 0.25807, 0.32831, 0.40133, 0.44989, 0.47991, 0.50993, 0.53899, 0.56804, 0.59210, 0.61617, 0.63693, 0.65737, 0.67251, 0.68764, 0.69952, 0.71139, 0.72345, 0.74169, 0.74754, 0.75339, 0.76312, 0.77285, 0.77974, 0.79039, 0.79432, 0.79825, 0.80339, 0.80852, 0.80852, 0.80852, 0.80852, 0.80852, 0.80852, 0.80852, 0.80852, 0.80852,
		0.25000, 0.03940, 0.09088, 0.14237, 0.18730, 0.23548, 0.29736, 0.37908, 0.42094, 0.45546, 0.48998, 0.52175, 0.55351, 0.57985, 0.60620, 0.62832, 0.64759, 0.66211, 0.67663, 0.69089, 0.70515, 0.71732, 0.73046, 0.73895, 0.74743, 0.75775, 0.76807, 0.77494, 0.78513, 0.78941, 0.79370, 0.79751, 0.80131, 0.80131, 0.80131, 0.80131, 0.80131, 0.80131, 0.80131, 0.80131, 0.80131,
		0.30000, 0.02105, 0.07111, 0.12117, 0.16889, 0.21358, 0.27307, 0.36078, 0.39780, 0.43628, 0.47475, 0.50898, 0.54320, 0.57105, 0.59890, 0.62148, 0.63960, 0.65446, 0.66933, 0.68524, 0.70114, 0.71218, 0.72017, 0.73149, 0.74282, 0.75344, 0.76406, 0.77072, 0.78160, 0.78576, 0.78991, 0.79267, 0.79543, 0.79543, 0.79543, 0.79543, 0.79543, 0.79543, 0.79543, 0.79543, 0.79543,
		0.35000, 0.01133, 0.05999, 0.10864, 0.15386, 0.19713, 0.25413, 0.34593, 0.38311, 0.42426, 0.46541, 0.50104, 0.53666, 0.56481, 0.59296, 0.61644, 0.63404, 0.64897, 0.66390, 0.68136, 0.69883, 0.70839, 0.71470, 0.72700, 0.73929, 0.75017, 0.76105, 0.76680, 0.77869, 0.78301, 0.78732, 0.78990, 0.79248, 0.79248, 0.79248, 0.79248, 0.79248, 0.79248, 0.79248, 0.79248, 0.79248,
		0.40000, 0.01125, 0.05547, 0.09970, 0.14255, 0.18485, 0.23899, 0.33409, 0.37210, 0.41535, 0.45859, 0.49502, 0.53146, 0.55933, 0.58720, 0.61292, 0.63141, 0.64536, 0.65932, 0.67819, 0.69707, 0.70681, 0.71390, 0.72526, 0.73661, 0.74795, 0.75928, 0.76566, 0.77654, 0.78101, 0.78549, 0.78894, 0.79238, 0.79238, 0.79238, 0.79238, 0.79238, 0.79238, 0.79238, 0.79238, 0.79238,
		0.45000, 0.01112, 0.05198, 0.09283, 0.13373, 0.17511, 0.22911, 0.32454, 0.36134, 0.40857, 0.45579, 0.49137, 0.52695, 0.55437, 0.58178, 0.61014, 0.62982, 0.64298, 0.65615, 0.67599, 0.69583, 0.70574, 0.71342, 0.72395, 0.73449, 0.74642, 0.75835, 0.76510, 0.77583, 0.77995, 0.78407, 0.78823, 0.79238, 0.79238, 0.79238, 0.79238, 0.79238, 0.79238, 0.79238, 0.79238, 0.79238,
		0.49900, 0.00863, 0.04837, 0.08810, 0.12785, 0.16768, 0.22315, 0.31616, 0.35695, 0.40596, 0.45497, 0.48882, 0.52267, 0.54989, 0.57711, 0.60863, 0.62850, 0.64173, 0.65497, 0.67517, 0.69536, 0.70530, 0.71325, 0.72319, 0.73313, 0.74554, 0.75795, 0.76490, 0.77583, 0.77964, 0.78345, 0.78792, 0.79238, 0.79238, 0.79238, 0.79238, 0.79238, 0.79238, 0.79238, 0.79238, 0.79238,
		0.50000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
		1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
	};
	//pf=0.001
	static const double table2[] = {
		
		
		0.00120, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.97000, 0.97000, 0.97000, 0.98000, 0.98000, 0.98000, 0.98000, 0.98000, 0.98000, 0.98000, 0.98000, 0.98000, 0.98000, 0.98000, 0.98000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000, 0.99000,
		0.00150, 0.87000, 0.87000, 0.88000, 0.88000, 0.89000, 0.89000, 0.89000, 0.89000, 0.91000, 0.92000, 0.92000, 0.92000, 0.92000, 0.93000, 0.93000, 0.93000, 0.93000, 0.93000, 0.93000, 0.93000, 0.93000, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.95000, 0.95000, 0.95000, 0.95000, 0.95000, 0.95000, 0.95000, 0.95000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.96000, 0.97000, 0.97000, 0.97000, 0.97000, 0.97000, 0.97000, 0.97000, 0.97000, 0.97000, 0.97000, 0.97000, 0.97000, 0.97000,
		0.00200, 0.78000, 0.78000, 0.80000, 0.80000, 0.81000, 0.82000, 0.83000, 0.84000, 0.84000, 0.86000, 0.86000, 0.86000, 0.87000, 0.88000, 0.88000, 0.88000, 0.89000, 0.89000, 0.90000, 0.90000, 0.90000, 0.90000, 0.90000, 0.90000, 0.91000, 0.91000, 0.91000, 0.92000, 0.92000, 0.92000, 0.92000, 0.93000, 0.93000, 0.93000, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.94000, 0.95000, 0.95000, 0.95000, 0.95000, 0.95000, 0.95000, 0.95000, 0.95000, 0.95000, 0.95000, 0.95000, 0.95000, 0.96000,
		0.00500, 0.54000, 0.54000, 0.57000, 0.57000, 0.59000, 0.64000, 0.64000, 0.68000, 0.68000, 0.69000, 0.71000, 0.72000, 0.73000, 0.74000, 0.75000, 0.75000, 0.77000, 0.78000, 0.80000, 0.80000, 0.80000, 0.80000, 0.80000, 0.81000, 0.82000, 0.82000, 0.82000, 0.84000, 0.84000, 0.84000, 0.84000, 0.85000, 0.85000, 0.86000, 0.86000, 0.86000, 0.86000, 0.87000, 0.88000, 0.88000, 0.88000, 0.88000, 0.88000, 0.88000, 0.88000, 0.88000, 0.88000, 0.89000, 0.89000, 0.89000, 0.91000, 0.91000, 0.91000, 0.91000, 0.91000, 0.91000, 0.91000, 0.91000, 0.91000, 0.91000, 0.91000, 0.91000, 0.91000,
		0.01000, 0.36000, 0.38000, 0.41000, 0.43000, 0.45000, 0.51000, 0.52000, 0.57000, 0.57000, 0.59000, 0.61000, 0.62000, 0.64000, 0.65000, 0.67000, 0.67000, 0.68000, 0.69000, 0.72000, 0.72000, 0.72000, 0.72000, 0.72000, 0.74000, 0.76000, 0.76000, 0.77000, 0.79000, 0.79000, 0.79000, 0.79000, 0.81000, 0.81000, 0.82000, 0.82000, 0.82000, 0.82000, 0.83000, 0.83000, 0.84000, 0.84000, 0.85000, 0.85000, 0.85000, 0.85000, 0.85000, 0.85000, 0.85000, 0.85000, 0.85000, 0.87000, 0.88000, 0.88000, 0.88000, 0.88000, 0.88000, 0.88000, 0.88000, 0.88000, 0.88000, 0.88000, 0.88000, 0.88000,
		0.01500, 0.27000, 0.29000, 0.32000, 0.36000, 0.38000, 0.43000, 0.46000, 0.51000, 0.52000, 0.53000, 0.55000, 0.56000, 0.58000, 0.60000, 0.62000, 0.62000, 0.64000, 0.65000, 0.67000, 0.67000, 0.69000, 0.69000, 0.69000, 0.71000, 0.74000, 0.74000, 0.74000, 0.76000, 0.76000, 0.76000, 0.77000, 0.78000, 0.78000, 0.79000, 0.79000, 0.80000, 0.80000, 0.81000, 0.81000, 0.82000, 0.82000, 0.83000, 0.83000, 0.83000, 0.84000, 0.84000, 0.84000, 0.84000, 0.84000, 0.84000, 0.85000, 0.85000, 0.86000, 0.86000, 0.86000, 0.86000, 0.86000, 0.86000, 0.86000, 0.87000, 0.87000, 0.87000, 0.88000,
		0.02000, 0.21000, 0.24000, 0.27000, 0.30000, 0.33000, 0.38000, 0.42000, 0.46000, 0.48000, 0.49000, 0.52000, 0.52000, 0.55000, 0.57000, 0.59000, 0.59000, 0.62000, 0.62000, 0.65000, 0.65000, 0.67000, 0.67000, 0.67000, 0.70000, 0.72000, 0.72000, 0.72000, 0.74000, 0.75000, 0.75000, 0.75000, 0.77000, 0.77000, 0.78000, 0.78000, 0.78000, 0.79000, 0.79000, 0.80000, 0.81000, 0.81000, 0.81000, 0.82000, 0.82000, 0.82000, 0.83000, 0.83000, 0.83000, 0.83000, 0.83000, 0.84000, 0.84000, 0.84000, 0.85000, 0.85000, 0.85000, 0.85000, 0.85000, 0.85000, 0.86000, 0.86000, 0.86000, 0.87000,
		0.02500, 0.19000, 0.22000, 0.24000, 0.27000, 0.29000, 0.35000, 0.39000, 0.42000, 0.45000, 0.46000, 0.49000, 0.49000, 0.53000, 0.54000, 0.56000, 0.56000, 0.60000, 0.60000, 0.63000, 0.64000, 0.65000, 0.66000, 0.66000, 0.68000, 0.71000, 0.71000, 0.71000, 0.72000, 0.72000, 0.73000, 0.74000, 0.75000, 0.75000, 0.77000, 0.77000, 0.77000, 0.78000, 0.78000, 0.79000, 0.79000, 0.80000, 0.80000, 0.80000, 0.81000, 0.81000, 0.81000, 0.82000, 0.82000, 0.83000, 0.83000, 0.83000, 0.83000, 0.83000, 0.84000, 0.84000, 0.85000, 0.85000, 0.85000, 0.85000, 0.86000, 0.86000, 0.86000, 0.87000,
		0.03000, 0.17000, 0.20000, 0.22000, 0.24000, 0.26000, 0.32000, 0.35000, 0.40000, 0.42000, 0.44000, 0.47000, 0.47000, 0.51000, 0.53000, 0.54000, 0.55000, 0.58000, 0.59000, 0.62000, 0.62000, 0.64000, 0.65000, 0.65000, 0.67000, 0.70000, 0.70000, 0.70000, 0.71000, 0.71000, 0.72000, 0.73000, 0.74000, 0.75000, 0.76000, 0.76000, 0.76000, 0.77000, 0.77000, 0.78000, 0.78000, 0.79000, 0.79000, 0.80000, 0.80000, 0.81000, 0.81000, 0.81000, 0.82000, 0.82000, 0.82000, 0.82000, 0.83000, 0.83000, 0.84000, 0.84000, 0.84000, 0.85000, 0.85000, 0.85000, 0.85000, 0.86000, 0.86000, 0.86000,
		0.03500, 0.16000, 0.18000, 0.20000, 0.22000, 0.24000, 0.30000, 0.33000, 0.38000, 0.40000, 0.42000, 0.45000, 0.45000, 0.49000, 0.51000, 0.53000, 0.54000, 0.57000, 0.58000, 0.61000, 0.61000, 0.63000, 0.64000, 0.65000, 0.66000, 0.69000, 0.69000, 0.69000, 0.71000, 0.71000, 0.72000, 0.72000, 0.74000, 0.74000, 0.75000, 0.75000, 0.76000, 0.76000, 0.77000, 0.77000, 0.78000, 0.78000, 0.79000, 0.79000, 0.79000, 0.80000, 0.81000, 0.81000, 0.81000, 0.81000, 0.82000, 0.82000, 0.82000, 0.83000, 0.83000, 0.84000, 0.84000, 0.84000, 0.85000, 0.85000, 0.85000, 0.85000, 0.86000, 0.86000,
		0.04000, 0.15000, 0.17000, 0.18000, 0.21000, 0.22000, 0.27000, 0.31000, 0.36000, 0.39000, 0.40000, 0.44000, 0.44000, 0.48000, 0.50000, 0.52000, 0.53000, 0.56000, 0.56000, 0.60000, 0.61000, 0.62000, 0.64000, 0.65000, 0.66000, 0.68000, 0.69000, 0.69000, 0.70000, 0.71000, 0.71000, 0.71000, 0.73000, 0.74000, 0.74000, 0.75000, 0.75000, 0.76000, 0.76000, 0.77000, 0.77000, 0.78000, 0.78000, 0.79000, 0.79000, 0.79000, 0.80000, 0.81000, 0.81000, 0.81000, 0.81000, 0.82000, 0.82000, 0.82000, 0.83000, 0.84000, 0.84000, 0.84000, 0.85000, 0.85000, 0.85000, 0.85000, 0.85000, 0.86000,
		0.04500, 0.14000, 0.16000, 0.17000, 0.19000, 0.21000, 0.26000, 0.29000, 0.34000, 0.38000, 0.39000, 0.43000, 0.44000, 0.48000, 0.49000, 0.51000, 0.52000, 0.56000, 0.56000, 0.59000, 0.60000, 0.61000, 0.63000, 0.65000, 0.65000, 0.67000, 0.68000, 0.68000, 0.70000, 0.71000, 0.71000, 0.71000, 0.73000, 0.73000, 0.74000, 0.74000, 0.75000, 0.75000, 0.76000, 0.77000, 0.77000, 0.78000, 0.78000, 0.78000, 0.79000, 0.79000, 0.79000, 0.80000, 0.80000, 0.81000, 0.81000, 0.81000, 0.82000, 0.82000, 0.83000, 0.83000, 0.84000, 0.84000, 0.84000, 0.84000, 0.84000, 0.85000, 0.85000, 0.86000,
		0.05000, 0.13000, 0.15000, 0.16000, 0.18000, 0.19000, 0.24000, 0.28000, 0.32000, 0.37000, 0.39000, 0.42000, 0.43000, 0.47000, 0.48000, 0.51000, 0.52000, 0.55000, 0.55000, 0.59000, 0.60000, 0.61000, 0.63000, 0.64000, 0.64000, 0.67000, 0.68000, 0.68000, 0.69000, 0.71000, 0.71000, 0.71000, 0.72000, 0.73000, 0.74000, 0.74000, 0.75000, 0.75000, 0.76000, 0.76000, 0.77000, 0.77000, 0.78000, 0.78000, 0.78000, 0.79000, 0.79000, 0.79000, 0.80000, 0.81000, 0.81000, 0.81000, 0.82000, 0.82000, 0.83000, 0.83000, 0.84000, 0.84000, 0.84000, 0.84000, 0.84000, 0.84000, 0.85000, 0.86000,
		0.05500, 0.12000, 0.14000, 0.15000, 0.17000, 0.18000, 0.23000, 0.27000, 0.31000, 0.36000, 0.38000, 0.41000, 0.42000, 0.46000, 0.48000, 0.50000, 0.51000, 0.54000, 0.55000, 0.58000, 0.59000, 0.60000, 0.62000, 0.64000, 0.64000, 0.66000, 0.67000, 0.68000, 0.69000, 0.70000, 0.70000, 0.70000, 0.72000, 0.73000, 0.73000, 0.74000, 0.75000, 0.75000, 0.75000, 0.76000, 0.77000, 0.77000, 0.77000, 0.78000, 0.78000, 0.78000, 0.79000, 0.79000, 0.80000, 0.80000, 0.81000, 0.81000, 0.82000, 0.82000, 0.82000, 0.83000, 0.83000, 0.84000, 0.84000, 0.84000, 0.84000, 0.84000, 0.85000, 0.86000,
		0.06000, 0.12000, 0.13000, 0.15000, 0.16000, 0.17000, 0.21000, 0.26000, 0.30000, 0.36000, 0.37000, 0.40000, 0.42000, 0.46000, 0.47000, 0.50000, 0.51000, 0.54000, 0.54000, 0.58000, 0.59000, 0.60000, 0.62000, 0.63000, 0.63000, 0.66000, 0.67000, 0.67000, 0.69000, 0.70000, 0.70000, 0.70000, 0.71000, 0.72000, 0.73000, 0.74000, 0.74000, 0.75000, 0.75000, 0.76000, 0.76000, 0.77000, 0.77000, 0.78000, 0.78000, 0.78000, 0.79000, 0.79000, 0.80000, 0.80000, 0.81000, 0.81000, 0.81000, 0.82000, 0.82000, 0.83000, 0.83000, 0.84000, 0.84000, 0.84000, 0.84000, 0.84000, 0.85000, 0.86000,
		0.06500, 0.11000, 0.12000, 0.14000, 0.15000, 0.16000, 0.20000, 0.26000, 0.30000, 0.35000, 0.36000, 0.40000, 0.41000, 0.45000, 0.46000, 0.50000, 0.51000, 0.53000, 0.54000, 0.58000, 0.59000, 0.59000, 0.61000, 0.63000, 0.63000, 0.66000, 0.67000, 0.67000, 0.68000, 0.70000, 0.70000, 0.70000, 0.71000, 0.72000, 0.73000, 0.73000, 0.74000, 0.75000, 0.75000, 0.76000, 0.76000, 0.77000, 0.77000, 0.77000, 0.78000, 0.78000, 0.79000, 0.79000, 0.80000, 0.80000, 0.81000, 0.81000, 0.81000, 0.82000, 0.82000, 0.83000, 0.83000, 0.84000, 0.84000, 0.84000, 0.84000, 0.84000, 0.85000, 0.85000,
		0.07000, 0.11000, 0.12000, 0.13000, 0.14000, 0.15000, 0.20000, 0.25000, 0.30000, 0.35000, 0.36000, 0.39000, 0.41000, 0.45000, 0.46000, 0.49000, 0.50000, 0.53000, 0.54000, 0.58000, 0.58000, 0.59000, 0.61000, 0.63000, 0.63000, 0.66000, 0.66000, 0.67000, 0.68000, 0.69000, 0.69000, 0.70000, 0.71000, 0.72000, 0.73000, 0.73000, 0.74000, 0.74000, 0.75000, 0.76000, 0.76000, 0.77000, 0.77000, 0.77000, 0.78000, 0.78000, 0.78000, 0.79000, 0.80000, 0.80000, 0.81000, 0.81000, 0.81000, 0.82000, 0.82000, 0.82000, 0.83000, 0.83000, 0.84000, 0.84000, 0.84000, 0.84000, 0.85000, 0.85000,
		0.07500, 0.10000, 0.11000, 0.12000, 0.13000, 0.15000, 0.19000, 0.24000, 0.29000, 0.34000, 0.36000, 0.39000, 0.41000, 0.44000, 0.45000, 0.49000, 0.50000, 0.52000, 0.54000, 0.57000, 0.58000, 0.59000, 0.61000, 0.63000, 0.63000, 0.65000, 0.66000, 0.67000, 0.68000, 0.69000, 0.69000, 0.69000, 0.71000, 0.72000, 0.73000, 0.73000, 0.74000, 0.74000, 0.75000, 0.76000, 0.76000, 0.77000, 0.77000, 0.77000, 0.78000, 0.78000, 0.78000, 0.79000, 0.80000, 0.80000, 0.80000, 0.81000, 0.81000, 0.82000, 0.82000, 0.82000, 0.83000, 0.83000, 0.84000, 0.84000, 0.84000, 0.84000, 0.84000, 0.85000,
		0.08000, 0.10000, 0.10000, 0.12000, 0.13000, 0.14000, 0.19000, 0.23000, 0.29000, 0.34000, 0.35000, 0.38000, 0.40000, 0.44000, 0.45000, 0.49000, 0.50000, 0.52000, 0.53000, 0.57000, 0.58000, 0.59000, 0.61000, 0.62000, 0.62000, 0.65000, 0.66000, 0.67000, 0.68000, 0.69000, 0.69000, 0.69000, 0.71000, 0.72000, 0.73000, 0.73000, 0.74000, 0.74000, 0.75000, 0.76000, 0.76000, 0.76000, 0.77000, 0.77000, 0.77000, 0.78000, 0.78000, 0.79000, 0.79000, 0.80000, 0.80000, 0.80000, 0.81000, 0.82000, 0.82000, 0.82000, 0.83000, 0.83000, 0.84000, 0.84000, 0.84000, 0.84000, 0.84000, 0.85000,
		0.08500, 0.10000, 0.10000, 0.11000, 0.12000, 0.14000, 0.18000, 0.23000, 0.28000, 0.33000, 0.35000, 0.38000, 0.40000, 0.44000, 0.45000, 0.49000, 0.50000, 0.51000, 0.53000, 0.57000, 0.58000, 0.59000, 0.61000, 0.62000, 0.62000, 0.65000, 0.66000, 0.67000, 0.68000, 0.68000, 0.69000, 0.69000, 0.71000, 0.72000, 0.73000, 0.73000, 0.74000, 0.74000, 0.75000, 0.76000, 0.76000, 0.76000, 0.76000, 0.77000, 0.77000, 0.78000, 0.78000, 0.79000, 0.79000, 0.80000, 0.80000, 0.80000, 0.81000, 0.82000, 0.82000, 0.82000, 0.83000, 0.83000, 0.83000, 0.83000, 0.83000, 0.84000, 0.84000, 0.85000,
		0.09000, 0.09000, 0.09000, 0.11000, 0.12000, 0.13000, 0.18000, 0.22000, 0.28000, 0.33000, 0.35000, 0.38000, 0.40000, 0.43000, 0.45000, 0.49000, 0.50000, 0.51000, 0.53000, 0.56000, 0.58000, 0.59000, 0.61000, 0.62000, 0.62000, 0.65000, 0.66000, 0.66000, 0.67000, 0.67000, 0.69000, 0.69000, 0.71000, 0.71000, 0.73000, 0.73000, 0.73000, 0.74000, 0.75000, 0.76000, 0.76000, 0.76000, 0.76000, 0.77000, 0.77000, 0.78000, 0.78000, 0.79000, 0.79000, 0.80000, 0.80000, 0.80000, 0.81000, 0.81000, 0.82000, 0.82000, 0.82000, 0.83000, 0.83000, 0.83000, 0.83000, 0.84000, 0.84000, 0.85000,
		0.09500, 0.09000, 0.09000, 0.10000, 0.11000, 0.13000, 0.18000, 0.22000, 0.28000, 0.33000, 0.34000, 0.38000, 0.40000, 0.43000, 0.45000, 0.48000, 0.49000, 0.51000, 0.53000, 0.56000, 0.57000, 0.59000, 0.61000, 0.62000, 0.62000, 0.65000, 0.65000, 0.66000, 0.67000, 0.67000, 0.68000, 0.69000, 0.71000, 0.71000, 0.72000, 0.73000, 0.73000, 0.74000, 0.75000, 0.75000, 0.76000, 0.76000, 0.76000, 0.77000, 0.77000, 0.78000, 0.78000, 0.79000, 0.79000, 0.80000, 0.80000, 0.80000, 0.81000, 0.81000, 0.82000, 0.82000, 0.82000, 0.82000, 0.83000, 0.83000, 0.83000, 0.84000, 0.84000, 0.85000,
		0.10000, 0.09000, 0.09000, 0.10000, 0.11000, 0.12000, 0.17000, 0.22000, 0.27000, 0.32000, 0.34000, 0.37000, 0.40000, 0.43000, 0.44000, 0.48000, 0.49000, 0.51000, 0.53000, 0.56000, 0.57000, 0.58000, 0.61000, 0.62000, 0.62000, 0.64000, 0.65000, 0.66000, 0.67000, 0.67000, 0.68000, 0.69000, 0.71000, 0.71000, 0.72000, 0.73000, 0.73000, 0.74000, 0.75000, 0.75000, 0.76000, 0.76000, 0.76000, 0.77000, 0.77000, 0.78000, 0.78000, 0.79000, 0.79000, 0.80000, 0.80000, 0.80000, 0.81000, 0.81000, 0.82000, 0.82000, 0.82000, 0.82000, 0.83000, 0.83000, 0.83000, 0.83000, 0.84000, 0.85000,
		0.12000, 0.08000, 0.08000, 0.09000, 0.09000, 0.11000, 0.16000, 0.21000, 0.26000, 0.31000, 0.33000, 0.37000, 0.39000, 0.42000, 0.44000, 0.48000, 0.49000, 0.51000, 0.53000, 0.55000, 0.57000, 0.58000, 0.60000, 0.61000, 0.61000, 0.64000, 0.64000, 0.66000, 0.67000, 0.67000, 0.68000, 0.68000, 0.70000, 0.71000, 0.72000, 0.72000, 0.73000, 0.74000, 0.74000, 0.75000, 0.76000, 0.76000, 0.76000, 0.77000, 0.77000, 0.78000, 0.78000, 0.78000, 0.79000, 0.79000, 0.80000, 0.80000, 0.81000, 0.81000, 0.81000, 0.82000, 0.82000, 0.82000, 0.83000, 0.83000, 0.83000, 0.83000, 0.84000, 0.84000,
		0.15000, 0.07000, 0.07000, 0.08000, 0.08000, 0.10000, 0.16000, 0.20000, 0.25000, 0.29000, 0.32000, 0.35000, 0.39000, 0.41000, 0.44000, 0.47000, 0.49000, 0.50000, 0.52000, 0.55000, 0.56000, 0.57000, 0.60000, 0.61000, 0.61000, 0.64000, 0.64000, 0.66000, 0.66000, 0.66000, 0.68000, 0.68000, 0.70000, 0.71000, 0.71000, 0.72000, 0.73000, 0.73000, 0.74000, 0.75000, 0.76000, 0.76000, 0.76000, 0.76000, 0.77000, 0.77000, 0.78000, 0.78000, 0.79000, 0.79000, 0.79000, 0.80000, 0.81000, 0.81000, 0.81000, 0.81000, 0.82000, 0.82000, 0.83000, 0.83000, 0.83000, 0.83000, 0.84000, 0.84000,
		0.20000, 0.05000, 0.05000, 0.06000, 0.06000, 0.10000, 0.15000, 0.19000, 0.24000, 0.27000, 0.31000, 0.34000, 0.38000, 0.41000, 0.43000, 0.46000, 0.48000, 0.50000, 0.51000, 0.54000, 0.55000, 0.57000, 0.59000, 0.60000, 0.61000, 0.64000, 0.64000, 0.65000, 0.66000, 0.66000, 0.68000, 0.68000, 0.70000, 0.71000, 0.71000, 0.71000, 0.73000, 0.73000, 0.74000, 0.75000, 0.76000, 0.76000, 0.76000, 0.76000, 0.76000, 0.77000, 0.77000, 0.78000, 0.78000, 0.79000, 0.79000, 0.80000, 0.80000, 0.81000, 0.81000, 0.81000, 0.81000, 0.82000, 0.82000, 0.82000, 0.83000, 0.83000, 0.83000, 0.84000,
		0.25000, 0.04000, 0.04000, 0.05000, 0.06000, 0.09000, 0.14000, 0.18000, 0.23000, 0.25000, 0.30000, 0.34000, 0.37000, 0.41000, 0.43000, 0.46000, 0.47000, 0.50000, 0.51000, 0.54000, 0.55000, 0.57000, 0.59000, 0.60000, 0.60000, 0.63000, 0.64000, 0.65000, 0.66000, 0.66000, 0.68000, 0.68000, 0.70000, 0.70000, 0.71000, 0.71000, 0.73000, 0.73000, 0.74000, 0.75000, 0.75000, 0.76000, 0.76000, 0.76000, 0.76000, 0.77000, 0.77000, 0.77000, 0.78000, 0.78000, 0.79000, 0.80000, 0.80000, 0.81000, 0.81000, 0.81000, 0.81000, 0.82000, 0.82000, 0.82000, 0.82000, 0.83000, 0.83000, 0.84000,
		
		
	};
#define LOOPMAX     10000           /* maximum count of search loop */

#define SGN(x)      ((x)<=0.0?-1.0:1.0)
#define ROUND(x)    (floor((x)+0.5))
#define SWAP(x,y)   do {double tmp_; tmp_=x; x=y; y=tmp_;} while (0)

	/* LD factorization (Q=L'*diag(D)*L) -----------------------------------------*/
	static int LD(int n, const double *Q, double *L, double *D)
	{
		int i, j, k, info = 0;
		double a, *A = mat(n, n);

		memcpy(A, Q, sizeof(double)*n*n);
		for (i = n - 1; i >= 0; i--) {
			if ((D[i] = A[i + i*n]) <= 0.0) { info = -1; break; }
			a = sqrt(D[i]);
			for (j = 0; j <= i; j++) L[i + j*n] = A[i + j*n] / a;
			for (j = 0; j <= i - 1; j++) for (k = 0; k <= j; k++) A[j + k*n] -= L[i + k*n] * L[i + j*n];
			for (j = 0; j <= i; j++) L[i + j*n] /= L[i + i*n];
		}
		free(A);
		if (info) fprintf(stderr, "%s : LD factorization error\n", __FILE__);
		return info;
	}
	/* integer gauss transformation ----------------------------------------------*/
	static void gauss(int n, double *L, double *Z, int i, int j)
	{
		int k, mu;

		if ((mu = (int)ROUND(L[i + j*n])) != 0) {
			for (k = i; k < n; k++) L[k + n*j] -= (double)mu*L[k + i*n];
			for (k = 0; k < n; k++) Z[k + n*j] -= (double)mu*Z[k + i*n];
		}
	}
	/* permutations --------------------------------------------------------------*/
	static void perm(int n, double *L, double *D, int j, double del, double *Z)
	{
		int k;
		double eta, lam, a0, a1;

		eta = D[j] / del;
		lam = D[j + 1] * L[j + 1 + j*n] / del;
		D[j] = eta*D[j + 1]; D[j + 1] = del;
		for (k = 0; k <= j - 1; k++) {
			a0 = L[j + k*n]; a1 = L[j + 1 + k*n];
			L[j + k*n] = -L[j + 1 + j*n] * a0 + a1;
			L[j + 1 + k*n] = eta*a0 + lam*a1;
		}
		L[j + 1 + j*n] = lam;
		for (k = j + 2; k < n; k++) SWAP(L[k + j*n], L[k + (j + 1)*n]);
		for (k = 0; k < n; k++) SWAP(Z[k + j*n], Z[k + (j + 1)*n]);
	}
	/* lambda reduction (z=Z'*a, Qz=Z'*Q*Z=L'*diag(D)*L) (ref.[1]) ---------------*/
	static void reduction(int n, double *L, double *D, double *Z)
	{
		int i, j, k;
		double del;

		j = n - 2; k = n - 2;
		while (j >= 0) {
			if (j <= k) for (i = j + 1; i < n; i++) gauss(n, L, Z, i, j);
			del = D[j] + L[j + 1 + j*n] * L[j + 1 + j*n] * D[j + 1];
			if (del + 1E-6 < D[j + 1]) { /* compared considering numerical error */
				perm(n, L, D, j, del, Z);
				k = j; j = n - 2;
			}
			else j--;
		}
	}
	/* modified lambda (mlambda) search (ref. [2]) -------------------------------*/
	static int search(int n, int m, const double *L, const double *D,
		const double *zs, double *zn, double *s)
	{
		int i, j, k, c, nn = 0, imax = 0;
		double newdist, maxdist = 1E99, y;
		double *S = zeros(n, n), *dist = mat(n, 1), *zb = mat(n, 1), *z = mat(n, 1), *step = mat(n, 1);

		k = n - 1; dist[k] = 0.0;
		zb[k] = zs[k];
		z[k] = ROUND(zb[k]); y = zb[k] - z[k]; step[k] = SGN(y);
		for (c = 0; c < LOOPMAX; c++) {
			newdist = dist[k] + y*y / D[k];
			if (newdist < maxdist) {
				if (k != 0) {
					dist[--k] = newdist;
					for (i = 0; i <= k; i++)
						S[k + i*n] = S[k + 1 + i*n] + (z[k + 1] - zb[k + 1])*L[k + 1 + i*n];
					zb[k] = zs[k] + S[k + k*n];
					z[k] = ROUND(zb[k]); y = zb[k] - z[k]; step[k] = SGN(y);
				}
				else {
					if (nn<m) {
						if (nn == 0 || newdist>s[imax]) imax = nn;
						for (i = 0; i < n; i++) zn[i + nn*n] = z[i];
						s[nn++] = newdist;
					}
					else {
						if (newdist < s[imax]) {
							for (i = 0; i < n; i++) zn[i + imax*n] = z[i];
							s[imax] = newdist;
							for (i = imax = 0; i < m; i++) if (s[imax] < s[i]) imax = i;
						}
						maxdist = s[imax];
					}
					z[0] += step[0]; y = zb[0] - z[0]; step[0] = -step[0] - SGN(step[0]);
				}
			}
			else {
				if (k == n - 1) break;
				else {
					k++;
					z[k] += step[k]; y = zb[k] - z[k]; step[k] = -step[k] - SGN(step[k]);
				}
			}
		}
		for (i = 0; i < m - 1; i++) { /* sort by s */
			for (j = i + 1; j < m; j++) {
				if (s[i] < s[j]) continue;
				SWAP(s[i], s[j]);
				for (k = 0; k < n; k++) SWAP(zn[k + i*n], zn[k + j*n]);
			}
		}
		free(S); free(dist); free(zb); free(z); free(step);

		if (c >= LOOPMAX) {
			fprintf(stderr, "%s : search loop count overflow\n", __FILE__);
			return -1;
		}
		return 0;
	}
	double NormalDensity(double x)
	{
		return OneOverRootTwoPi*exp(-x*x / 2);
	}
	double CumulativeNormal(double x)
	{
		double result, tmp;
		static double a[5] = {
			0.319381530,
			-0.356563782,
			1.781477937,
			-1.821255978,
			1.330274429 };

		if (x<-7.0)
			result = NormalDensity(x) / sqrt(1. + x*x);
		else
		{
			if (x>7.0)
				result = 1.0 - CumulativeNormal(-x);
			else
			{
				tmp = 1.0 / (1.0 + 0.2316419*fabs(x));
				result = 1 - NormalDensity(x)*
					(tmp*(a[0] + tmp*(a[1] + tmp*(a[2] +
					tmp*(a[3] + tmp*a[4])))));
				if (x <= 0.0)
					result = 1.0 - result;
			}
		}
		return result;
	}
	double *pf_isl(const double *D, const int n)
	{
		int i, j;
		double tmp, pro = 1.0, c[2];
		for (i = 0; i<n; i++)
		{
			tmp = 0.5 / sqrt(D[i]);
			pro *= (2 * CumulativeNormal(tmp) - 1);
		}
		c[1] = pro;
		i = n - 1;
		if (n>40)
		{
			c[0] = 0.5;
			return c;
		}

		if ((1 - pro) < 0.01)
			c[0] = 1.0;
		else if ((1 - pro) < 0.011)
			c[0] = probability[i];
		else if ((1 - pro) <= 0.096)
		{
			j = (int)((1 - pro - 0.001) / 0.005);
			c[0] = probability[i + 40 * (j - 1)];
		}
		else if ((1 - pro) < 0.12)
			c[0] = probability[i + 720];
		else if ((1 - pro) >= 0.5)
			c[0] = probability[i + 1080];
		else
		{
			j = (int)((1 - pro) / 0.05);
			c[0] = probability[i + 40 * (j + 17)];
		}
		return c;
	}
	double pfisl(const double *D, const int n, const double p0)
	{
		int i, j, k;
		double tmp, pro = 1.0, c;
		for (i = 0; i < n; i++)
		{
			tmp = 0.5 / sqrt(D[i]);
			pro *= (2 * CumulativeNormal(tmp) - 1);
		}

		i = n;
		if (p0 == 0.01)
		{
			for (k = 30; k >= 0; k--)
			if (1 - pro >= table1[k * 41])
			{
				c = table1[i + 41 * k] + (1 - pro - table1[k * 41]) / (table1[(k + 1) * 41] - table1[k * 41])*(table1[i + 41 * (k + 1)] - table1[i + 41 * k]);
				break;
			}

		}
		if (p0 == 0.001)
		{
			for (k = 30; k >= 0; k--)
			if (1 - pro >= table2[k * 64])
			{
				c = table2[i + 64 * k] + (1 - pro - table2[k * 64]) / (table2[(k + 1) * 64] - table2[k * 64])*(table2[i + 64 * (k + 1)] - table2[i + 64 * k]);
				break;
			}
		}
		return c;
	}
	/* lambda/mlambda integer least-square estimation ------------------------------
	* integer least-square estimation. reduction is performed by lambda (ref.[1]),
	* and search by mlambda (ref.[2]).
	* args   : int    n      I  number of float parameters
	*          int    m      I  number of fixed solutions
	*          double *a     I  float parameters (n x 1)
	*          double *Q     I  covariance matrix of float parameters (n x n)
	*          double *F     O  fixed solutions (n x m)
	*          double *s     O  sum of squared residulas of fixed solutions (1 x m)
	* return : status (0:ok,other:error)
	* notes  : matrix stored by column-major order (fortran convension)
	ref[1]Verhagen S, Teunissen P J G. The ratio test for future GNSS ambiguity resolution[J].
	GPS solutions, 2013, 17(4): 535-548.
	[2]LAMBDA software package,Matlab implementation, Version 3.0,Sandra Verhagen and Bofeng Li
	*-----------------------------------------------------------------------------*/
	extern int lambdaffrt(int n, int m, const double *a, const double *Q, double *F,
		double *s)
	{
		int info, i;
		double *L, *D, *Z, *z, *E;
		double *usrc;
		usrc = (double*)malloc(sizeof(double)* 2);
		if (n <= 0 || m <= 0) return -1;
		L = zeros(n, n); D = mat(n, 1); Z = eye(n); z = mat(n, 1), E = mat(n, m);
		//printMat(Q, n, n);

		double *dmat_test0, *dmat_test1;
		int row_counter = 3, column_counter = 4, counter_test = 0;
		dmat_test0 = mat(row_counter, column_counter);
		dmat_test1 = mat(row_counter, column_counter);
		for (int ii = 0; ii < column_counter; ++ii)
		for (int jj = 0; jj < row_counter; ++jj)
		{
			dmat_test0[ii + jj*column_counter] = counter_test;
			dmat_test1[jj + ii*row_counter] = counter_test++;
		}
		//printMat(dmat_test0, 3, 4);
		//printMat(dmat_test1, 3, 4);
		/* LD factorization */
		if (!(info = LD(n, Q, L, D))) {
			//double *Q_my, *D_my, *Q_tmp_my;
			//Q_my = mat(n, n);
			//D_my = zeros(n, n);
			//Q_tmp_my = mat(n, n);
			//for (int ii = 0; ii < n; ++ii)
			//	D_my[ii + ii*n] = D[ii];
			//matmul("TN", n, n, n, 1.0, L, D_my, 0.0, Q_tmp_my);
			//matmul("NN", n, n, n, 1.0, Q_tmp_my, L, 0.0, Q_my);
			//printMat(L, n, n);
			//printMat(D, n, 1);
			//printMat(Q_my, n, n);
			/* lambda reduction */
			reduction(n, L, D, Z);
			matmul("TN", n, 1, n, 1.0, Z, a, 0.0, z); /* z=Z'*a */
			//printf("=========Z========\n");
			//printMat(Z, n, n);
			/* mlambda search */
			if (!(info = search(n, m, L, D, z, E, s))) {

				info = solve("T", Z, E, n, m, F); /* F=Z'\E */
			}
			//printf("=========L========\n");
			//for (int ii = 0; ii < n; ++ii)
			//	D_my[ii + ii*n] = D[ii];
			//matmul("TN", n, n, n, 1.0, L, D_my, 0.0, Q_tmp_my);
			//matmul("NN", n, n, n, 1.0, Q_tmp_my, L, 0.0, Q_my);
			//printMat(L, n, n);
			//printf("=========D========\n");
			//printMat(D, n, 1);
			//printf("=========Q========\n");
			//printMat(Q_my, n, n);
		}

		usrc = pf_isl(D, n);
		s[2] = usrc[0];
		s[3] = usrc[1];
		//s[2]=pfisl(D,n,0.01);
		/*if(s[2]==0)
		info=1;*/
		trace(6, "ratio=%5.2f,%6.4f,%d\n", s[1] / s[0], s[3], n);
		free(L); free(D); free(Z); free(z); free(E);
		//free(usrc);
		return info;
	}
	/* lambda/mlambda integer least-square estimation ------------------------------
	* integer least-square estimation. reduction is performed by lambda (ref.[1]),
	* and search by mlambda (ref.[2]).
	* args   : int    n      I  number of float parameters
	*          int    m      I  number of fixed solutions
	*          double *a     I  float parameters (n x 1)
	*          double *Q     I  covariance matrix of float parameters (n x n)
	*          double *F     O  fixed solutions (n x m)
	*          double *s     O  sum of squared residulas of fixed solutions (1 x m)
	* return : status (0:ok,other:error)
	* notes  : matrix stored by column-major order (fortran convension)
	*-----------------------------------------------------------------------------*/
	extern int lambda(int n, int m, const double *a, const double *Q, double *F,
		double *s)
	{
		int info;
		double *L, *D, *Z, *z, *E;

		if (n <= 0 || m <= 0) return -1;
		L = zeros(n, n); D = mat(n, 1); Z = eye(n); z = mat(n, 1); E = mat(n, m);

		/* LD factorization */
		if (!(info = LD(n, Q, L, D))) {

			/* lambda reduction */
			reduction(n, L, D, Z);
			matmul("TN", n, 1, n, 1.0, Z, a, 0.0, z); /* z=Z'*a */

			/* mlambda search */
			if (!(info = search(n, m, L, D, z, E, s))) {

				info = solve("T", Z, E, n, m, F); /* F=Z'\E */
			}
		}
		free(L); free(D); free(Z); free(z); free(E);
		return info;
	}
	/* lambda reduction ------------------------------------------------------------
	* reduction by lambda (ref [1]) for integer least square
	* args   : int    n      I  number of float parameters
	*          double *Q     I  covariance matrix of float parameters (n x n)
	*          double *Z     O  lambda reduction matrix (n x n)
	* return : status (0:ok,other:error)
	*-----------------------------------------------------------------------------*/
	extern int PARlambda(int n, int m, const double *a, const double *Q, double *F,
		double *s, int *t0, int *index0)
	{
		int info, i, j, *index, t = 0;
		double *L, *D, *Z, *z, *E, trd = 0;
		double *Q1, *a1, *F1, *F0, *Q0, *a0;

		if (n <= 0 || m <= 0) return -1;
		L = zeros(n, n); D = mat(n, 1); Z = eye(n); z = mat(n, 1), E = mat(n, m);
		index = (int*)malloc(sizeof(int)*n);

		/* LD factorization */
		if (!(info = LD(n, Q, L, D))) {

			reduction(n, L, D, Z);
			matmul("TN", n, 1, n, 1.0, Z, a, 0.0, z); /* z=Z'*a */

			if (!(info = search(n, m, L, D, z, E, s))) {

				info = solve("T", Z, E, n, m, F); /* F=Z'\E */

				//trace(6,"ratio=,%5.2f,%d\n",trd,n); 
			}
			trd = s[1] / s[0];
			F0 = mat(n, 2); Q0 = mat(n, n); a0 = zeros(n, 1);
			for (i = 0; i < n; i++)
			{
				F0[i] = F[i]; F0[i + n] = F[i + n]; a0[i] = a[i]; index0[i] = i;
				for (j = 0; j<n; j++)
					Q0[i + j*n] = Q[i + j*n];
			}
			*t0 = n;
			while (*t0>16 && info == 0 && trd < 2)
			{
				t = 0;
				for (i = 0; i < *t0; i++)
				if (F0[i] == F0[*t0 + i])
				{
					index0[t] = index0[i]; index[t] = i; t++;
				}
				if (t < 10){ break; info = 1; }
				Q1 = mat(t, t); a1 = zeros(t, 1); F1 = mat(t, 2);
				for (i = 0; i < t; i++)
				{
					a1[i] = a0[index[i]];
					for (j = 0; j < t; j++)
						Q1[j + i*t] = Q0[index[j] + index[i] * (*t0)];
				}
				info = lambda(t, 2, a1, Q1, F1, s);
				trd = s[1] / s[0];
				free(Q0); free(F0); free(a0);
				F0 = mat(t, 2); Q0 = mat(t, t); a0 = zeros(t, 1);
				for (i = 0; i < t; i++)
				{
					F0[i] = F1[i]; F0[i + t] = F1[i + t]; a0[i] = a1[i];
					for (j = 0; j < t; j++)
						Q0[i + j*t] = Q1[i + j*t];
				}
				free(Q1); free(F1); free(a1);
				*t0 = t;
			}
			//printMat(F0,*t0,2);
			for (i = 0; i < *t0; i++)
			{
				F[i] = F0[i]; F[i + n] = F0[i + (*t0)];
			}
			if (*t0 < 10)
				*t0 = 0;
			//trace(6,"ratio=,%5.2f,%d\n",trd,*t0); 
			free(F0); free(Q0); free(a0);

		}
		free(L); free(D); free(Z); free(z); free(E); free(index);
		return info;
	}
	extern int PARlambdaffrt(int n, int m, const double *a, const double *Q, double *F,
		double *s, int *t0, int *index0)
	{
		int info, i, j, *index, t = 0;
		double *L, *D, *Z, *z, *E, trd = 0;
		double *Q1, *a1, *F1, *F0, *Q0, *a0, *infosrc, pro;

		if (n <= 0 || m <= 0) return -1;
		L = zeros(n, n); D = mat(n, 1); Z = eye(n); z = mat(n, 1), E = mat(n, m);
		index = (int*)malloc(sizeof(int)*n);
		infosrc = (double*)malloc(sizeof(double)* 2);

		/* LD factorization */
		if (!(info = LD(n, Q, L, D))) {

			reduction(n, L, D, Z);
			matmul("TN", n, 1, n, 1.0, Z, a, 0.0, z); /* z=Z'*a */

			if (!(info = search(n, m, L, D, z, E, s))) {

				info = solve("T", Z, E, n, m, F); /* F=Z'\E */

				//trace(6,"ratio=,%5.2f,%d\n",trd,n); 
			}
			infosrc = pf_isl(D, n);
			pro = infosrc[1];
			s[2] = infosrc[0];
			trd = s[1] / s[0];
			F0 = mat(n, 2); Q0 = mat(n, n); a0 = zeros(n, 1);
			for (i = 0; i < n; i++)
			{
				F0[i] = F[i]; F0[i + n] = F[i + n]; a0[i] = a[i]; index0[i] = i;
				for (j = 0; j<n; j++)
					Q0[i + j*n] = Q[i + j*n];
			}
			*t0 = n;
			while (*t0>16 && info == 0 && trd < 1 / s[2])
			{
				t = 0;
				for (i = 0; i < *t0; i++)
				if (F0[i] == F0[*t0 + i])
				{
					index0[t] = index0[i]; index[t] = i; t++;
				}
				if (t < 10){ break; info = 1; }
				Q1 = mat(t, t); a1 = zeros(t, 1); F1 = mat(t, 2);
				for (i = 0; i < t; i++)
				{
					a1[i] = a0[index[i]];
					for (j = 0; j < t; j++)
						Q1[j + i*t] = Q0[index[j] + index[i] * (*t0)];
				}
				info = lambdaffrt(t, 2, a1, Q1, F1, s);
				pro = s[3];
				trd = s[1] / s[0];
				free(Q0); free(F0); free(a0);
				F0 = mat(t, 2); Q0 = mat(t, t); a0 = zeros(t, 1);
				for (i = 0; i < t; i++)
				{
					F0[i] = F1[i]; F0[i + t] = F1[i + t]; a0[i] = a1[i];
					for (j = 0; j < t; j++)
						Q0[i + j*t] = Q1[i + j*t];
				}
				free(Q1); free(F1); free(a1);
				*t0 = t;
			}
			//printMat(F0,*t0,2);
			for (i = 0; i < *t0; i++)
			{
				F[i] = F0[i]; F[i + n] = F0[i + (*t0)];
			}
			trace(6, "ratio=%5.2f,%6.4f,%d\n", s[1] / s[0], pro, *t0);
			if (*t0 < 10)
				*t0 = 0;
			free(F0); free(Q0); free(a0);
			//trace(6,"ratio=%5.2f,%6.4f,%d\n",s[1]/s[0],pro,*t0); 

		}
		free(L); free(D); free(Z); free(z); free(E); free(index); free(infosrc);
		return info;
	}
	extern int SRCPARlambda(int n, int m, const double *a, const double *Q, double *Epar, double *Zpar, double *Qpar,
		double *s, int *nfixed, double P0)
	{


		int info, i, j, k;
		double *L, *D, *Z, *z, *E, *L1, *D1, trd = 0, ps, tmp;
		double *a1, *F1, *ZTQ, *Qz;
		//	printMat(Q,n,n);printMat(a,1,n);
		if (n <= 0 || m <= 0) return -1;
		L = zeros(n, n); D = mat(n, 1); Z = eye(n); z = mat(n, 1), E = mat(n, m);
		ZTQ = mat(n, n); Qz = mat(n, n);
		/* LD factorization */
		if (!(info = LD(n, Q, L, D))) {
			reduction(n, L, D, Z);
			matmul("TN", n, 1, n, 1.0, Z, a, 0.0, z); /* z=Z'*a */
			matmul("TN", n, n, n, 1.0, Z, Q, 0.0, ZTQ);//Qz=Z'*Q*Z
			matmul("NN", n, n, n, 1.0, ZTQ, Z, 0.0, Qz);
			for (j = 0; j<n - 3; j++)
			{
				ps = 1;
				for (i = n - 1; i >= j; i--)
				{
					tmp = 0.5 / sqrt(D[i]);
					ps *= (2 * CumulativeNormal(tmp) - 1);
				}
				if (ps>P0)
					break;
			}
			k = n - j;
			F1 = mat(k, m); a1 = mat(k, 1); L1 = mat(k, k); D1 = mat(k, 1);
			//Zpar=mat(n,k);Qpar=mat(k,k);Epar=mat(k,m);
			for (i = 0; i < k; i++)
			{
				a1[k - 1 - i] = z[n - 1 - i]; D1[k - 1 - i] = D[n - 1 - i];
				for (j = 0; j < k; j++)
				{
					L1[k - 1 - i + (k - 1 - j)*k] = L[n - 1 - i + (n - 1 - j)*n];
					Qpar[k - 1 - i + (k - 1 - j)*k] = Qz[n - 1 - i + (n - 1 - j)*n];
				}
			}
			info = search(k, m, L1, D1, a1, Epar, s);
			for (i = 0; i < k; i++)
			{
				Epar[i] = a1[i] - Epar[i];
				for (j = 0; j < n; j++)
					Zpar[j + i*n] = Z[j + (n - k + i)*n];
			}
			if (info == 0)
			{
				trd = s[1] / s[0]; *nfixed = k;
			}
			//trace(6,"ratio=,%5.2f,%d\n",trd,k); 

		}
		free(L); free(D); free(Z); free(z); free(E);
		return info;
	}
	extern int SRCPARlambdaffrt(int n, int m, const double *a, const double *Q, double *Epar, double *Zpar, double *Qpar,
		double *s, int *nfixed, double P0)
	{

		int info, i, j, k;
		double *L, *D, *Z, *z, *E, *L1, *D1, trd = 0, ps, tmp, *usrc;
		double *a1, *F1, *ZTQ, *Qz;
		usrc = (double*)malloc(sizeof(double)* 2);
		//	printMat(Q,n,n);printMat(a,1,n);
		if (n <= 0 || m <= 0) return -1;
		L = zeros(n, n); D = mat(n, 1); Z = eye(n); z = mat(n, 1), E = mat(n, m);
		ZTQ = mat(n, n); Qz = mat(n, n);
		/* LD factorization */
		if (!(info = LD(n, Q, L, D))) {
			reduction(n, L, D, Z);
			matmul("TN", n, 1, n, 1.0, Z, a, 0.0, z); /* z=Z'*a */
			matmul("TN", n, n, n, 1.0, Z, Q, 0.0, ZTQ);//Qz=Z'*Q*Z
			matmul("NN", n, n, n, 1.0, ZTQ, Z, 0.0, Qz);
			for (j = 0; j<n - 3; j++)
			{
				ps = 1;
				for (i = n - 1; i >= j; i--)
				{
					tmp = 0.5 / sqrt(D[i]);
					ps *= (2 * CumulativeNormal(tmp) - 1);
				}
				if (ps>P0)
					break;
			}
			k = n - j;
			F1 = mat(k, m); a1 = mat(k, 1); L1 = mat(k, k); D1 = mat(k, 1);
			//Zpar=mat(n,k);Qpar=mat(k,k);Epar=mat(k,m);
			for (i = 0; i < k; i++)
			{
				a1[k - 1 - i] = z[n - 1 - i]; D1[k - 1 - i] = D[n - 1 - i];
				for (j = 0; j < k; j++)
				{
					L1[k - 1 - i + (k - 1 - j)*k] = L[n - 1 - i + (n - 1 - j)*n];
					Qpar[k - 1 - i + (k - 1 - j)*k] = Qz[n - 1 - i + (n - 1 - j)*n];
				}
			}
			info = search(k, m, L1, D1, a1, Epar, s);
			usrc = pf_isl(D1, k);
			s[2] = usrc[0];
			for (i = 0; i < k; i++)
			{
				Epar[i] = a1[i] - Epar[i];
				for (j = 0; j < n; j++)
					Zpar[j + i*n] = Z[j + (n - k + i)*n];
			}
			if (info == 0)
			{
				trd = s[1] / s[0]; *nfixed = k;
			}
			trace(6, "ratio=%5.2f,%6.4f,%d\n", s[1] / s[0], usrc[1], k);

		}
		free(L); free(D); free(Z); free(z); free(E);
		return info;
	}
	extern int lambda_reduction(int n, const double *Q, double *Z)
	{
		double *L, *D;
		int i, j, info;

		if (n <= 0) return -1;

		L = zeros(n, n); D = mat(n, 1);

		for (i = 0; i < n; i++) for (j = 0; j < n; j++) {
			Z[i + j*n] = i == j ? 1.0 : 0.0;
		}
		/* LD factorization */
		if ((info = LD(n, Q, L, D))) {
			free(L); free(D);
			return info;
		}
		/* lambda reduction */
		reduction(n, L, D, Z);

		free(L); free(D);
		return 0;
	}
	/* mlambda search --------------------------------------------------------------
	* search by  mlambda (ref [2]) for integer least square
	* args   : int    n      I  number of float parameters
	*          int    m      I  number of fixed solutions
	*          double *a     I  float parameters (n x 1)
	*          double *Q     I  covariance matrix of float parameters (n x n)
	*          double *F     O  fixed solutions (n x m)
	*          double *s     O  sum of squared residulas of fixed solutions (1 x m)
	* return : status (0:ok,other:error)
	*-----------------------------------------------------------------------------*/
	extern int lambda_search(int n, int m, const double *a, const double *Q,
		double *F, double *s)
	{
		double *L, *D;
		int info;

		if (n <= 0 || m <= 0) return -1;

		L = zeros(n, n); D = mat(n, 1);

		/* LD factorization */
		if ((info = LD(n, Q, L, D))) {
			free(L); free(D);
			return info;
		}
		/* mlambda search */
		info = search(n, m, L, D, a, F, s);

		free(L); free(D);
		return info;
	}
}